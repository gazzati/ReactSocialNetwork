{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","currentDialog","id","s","item","activeDialogItem","to","src","photo","userPhoto","alt","userName","name","Message","isItMe","message","myMessage","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","onKeyDown","e","cb","key","shiftKey","preventDefault","handleKeyDown","createField","Textarea","button","Dialogs","useState","setCurrentDialog","useEffect","getAllDialogs","dialogsPage","messages","dialogsElements","dialogs","map","d","onClick","chooseDialog","photos","large","hasNewMessage","hasNewMessages","newMessagesCount","messagesElements","m","authorizedUserId","senderId","body","getMessages","isFetching","Preloader","dialogsItems","messagesBlock","formBlock","values","sendMessage","newMessageBody","compose","connect","state","auth","getDialogs","startDialog","withAuthRedirect"],"mappings":"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","file":"static/js/3.c78ebedf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1iKbW\",\"dialogsItems\":\"Dialogs_dialogsItems__3Q0RQ\",\"item\":\"Dialogs_item__2DVCQ\",\"activeDialogItem\":\"Dialogs_activeDialogItem__2-nEP\",\"userName\":\"Dialogs_userName__91Hcm\",\"messages\":\"Dialogs_messages__3dwf2\",\"messagesBlock\":\"Dialogs_messagesBlock__cP_-T\",\"message\":\"Dialogs_message__1LrPy\",\"myMessage\":\"Dialogs_myMessage__qugb6\",\"formBlock\":\"Dialogs_formBlock__n-_qE\",\"form\":\"Dialogs_form__3pkEW\",\"button\":\"Dialogs_button__1m-Z1\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n    photo: string | null\r\n    hasNewMessage: boolean\r\n    newMessagesCount: number\r\n    currentDialog: number\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let className = props.currentDialog === props.id ? `${s.item} ${s.activeDialogItem}` : s.item\r\n    return (\r\n        <NavLink to={\"/dialogs/\" + props.id} className={className}>\r\n            <img src={props.photo || userPhoto} alt={\"\"}/>\r\n            <div className={s.userName}>{props.name}</div>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    isItMe: boolean\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    let className = props.isItMe ? `${s.message} ${s.myMessage}` : s.message\r\n\r\n    return (\r\n        <div className={className}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\"\r\nimport {createField, GetStringKeys, Textarea} from \"../../common/FormsControls/FormsControls\"\r\nimport s from \"../Dialogs.module.css\"\r\nimport {NewMessageFormValuesType} from \"../Dialogs\"\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\"\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = GetStringKeys<NewMessageFormValuesType>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n\r\n    let handleKeyDown =  (e: any, cb: any) => {\r\n        if (e.key === 'Enter' && e.shiftKey === false) {\r\n            e.preventDefault();\r\n            cb();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}\r\n              onKeyDown={(e) => handleKeyDown(e, props.handleSubmit)}>\r\n            <div className={s.form}>\r\n                {createField<NewMessageFormValuesKeysType>(\r\n                    \"Enter your message\",\r\n                        \"newMessageBody\",\r\n                        [],\r\n                        Textarea,\r\n                    {}, {className: \"sendMessageArea\"})}\r\n                <button className={s.button}>Send</button>\r\n            </div>\r\n\r\n        </form>)\r\n}\r\n\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);","import React, {useEffect, useState} from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport Message from \"./Message/Message\"\r\nimport { InitialStateType } from \"../../redux/dialogs-reducer\"\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\"\r\nimport Preloader from '../common/Preloader/Preloader'\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    getDialogs: (userId: number) => void\r\n    sendMessage: (userId: number, message: string) => void\r\n    getAllDialogs: () => void\r\n    getMessages: (userId: number) => void\r\n    authorizedUserId: number\r\n    isFetching: boolean\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let [currentDialog, setCurrentDialog] = useState(0);\r\n\r\n    useEffect(() => {\r\n        props.getAllDialogs()\r\n    }, [props.dialogsPage.messages])\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d =>\r\n        <span onClick={() => chooseDialog(d.id)} >\r\n            <DialogItem name={d.userName} key={d.id} id={d.id} photo={d.photos.large} currentDialog={currentDialog}\r\n                        hasNewMessage={d.hasNewMessages} newMessagesCount={d.newMessagesCount}/>\r\n        </span>);\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message isItMe={props.authorizedUserId === m.senderId} message={m.body} key={m.id}/>);\r\n\r\n    useEffect(() => {\r\n        dialogsElements = props.dialogsPage.dialogs.map(d =>\r\n            <span onClick={() => chooseDialog(d.id)} >\r\n            <DialogItem name={d.userName} key={d.id} id={d.id} photo={d.photos.large} currentDialog={currentDialog}\r\n                        hasNewMessage={d.hasNewMessages} newMessagesCount={d.newMessagesCount}/>\r\n        </span>);\r\n\r\n        messagesElements = props.dialogsPage.messages.map(m => <Message isItMe={props.authorizedUserId === m.senderId} message={m.body} key={m.id}/>);\r\n\r\n    }, [props.dialogsPage.messages, props.dialogsPage.dialogs])\r\n\r\n    const chooseDialog = (id: number) => {\r\n        props.getMessages(id)\r\n        setCurrentDialog(id)\r\n    }\r\n\r\n\r\n    let addNewMessage = (values: {newMessageBody: string}) => {\r\n        props.sendMessage(currentDialog, values.newMessageBody)\r\n        props.getMessages(currentDialog)\r\n        values.newMessageBody = \"\";\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            {props.isFetching ? <Preloader /> : null}\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            {currentDialog !== 0 &&<div className={s.messages}>\r\n                <div className={s.messagesBlock}>{messagesElements}</div>\r\n                 <span className={s.formBlock}><AddMessageForm onSubmit={addNewMessage}/></span>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport Dialogs from \"./Dialogs\";\r\nimport {startDialog, sendMessage, getAllDialogs, getMessages} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        authorizedUserId: state.auth.id,\r\n        isFetching: state.dialogsPage.isFetching,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getDialogs: startDialog,\r\n        sendMessage: sendMessage,\r\n        getAllDialogs: getAllDialogs,\r\n        getMessages: getMessages\r\n    }),\r\n        withAuthRedirect) (Dialogs) as React.ComponentType;"],"sourceRoot":""}